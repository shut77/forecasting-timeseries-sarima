from fastapi import FastAPI, UploadFile, File, Form
import uvicorn
import numpy as np
import utils
from typing import List, Optional
from pydantic import BaseModel
import model
import pandas as pd
from io import BytesIO


app = FastAPI(title="SARIMAX Forecasting API")

function_forecast = model.load_sarimax_compact(r'C:\Users\Artem\Desktop\vs code project\SARIMA_for_git\models\sarimax_model_clean2.pkl')

# –ú–æ–¥–µ–ª—å –¥–ª—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
class ForecastRequest(BaseModel):
    steps: int = 24
    exog_data: Optional[List[List[float]]] = None  # —ç–∫–∑–æ–≥–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞ –±—É–¥—É—â–µ–µ

class ForecastResponse(BaseModel):
    forecast: List[float]
    #confidence_intervals: List[dict]
    steps: int

@app.get("/", summary='–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã', tags=['–ø—Ä–æ—Å—Ç–æ –Ω–∞—á–∞–ª–æ2'])
def home():
    return {"message": "SARIMAX Forecasting API is running", "docs": "/docs"}

@app.post("/predict", response_model=ForecastResponse)
def predict(request: ForecastRequest):
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        print(f"üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: steps={request.steps}")
        
        # –î–µ–ª–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
        forecast_result = function_forecast(
            steps=request.steps, 
            exog=np.array(request.exog_data) if request.exog_data else None
        )
        
        print(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ —Å–æ–∑–¥–∞–Ω: {type(forecast_result)}")
        
        forecast_mean = forecast_result.predicted_mean
        conf_int = forecast_result.conf_int()
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(forecast_mean)} —Ç–æ—á–µ–∫")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = ForecastResponse(
            forecast=forecast_mean.tolist(),
            #confidence_intervals=[
                #{"lower": float(lower), "upper": float(upper)} 
                #for lower, upper in zip(conf_int.iloc[:, 0], conf_int.iloc[:, 1])
            #],
            steps=request.steps
        )
        
        return response
        
    except Exception as e:
        
        print(f" –û–®–ò–ë–ö–ê: {str(e)}")
        import traceback
        print(f" –î–ï–¢–ê–õ–ò: {traceback.format_exc()}")
        
        
        from fastapi import HTTPException
        raise HTTPException(
            status_code=500, 
            detail={
                "error": str(e),
                "type": type(e).__name__
            }
        )

















@app.post('/model', summary='–î–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å —ç–∫–∑–æ')
async def predict_so_big(file: UploadFile = File(...), time_col: str = Form("time"), 
                         value_col: str = Form("value"), train_size: float = Form(0.8), 
                         season_period: int = Form(24), freq: str = Form(None)):
    read = await file.read()
    df = pd.read_csv(BytesIO(read))
    df = utils.setup_time_index(df, time_col)
    series = df[value_col]

    # –ü–û–î–ì–û–¢–ê–í–õ–ò–í–ê–ï–ú –†–Ø–î –ò –°–û–ó–î–ê–ï–ú –≠–ö–ó–û–ì–ï–ù–ù–´–ï –ü–†–ò–ó–ù–ê–ö–ò
    season = season_period
    create_fourier = utils.create_exog_fourier(df, seasonal=season)
    
    if freq is None:
        freq = utils.get_data_frequency(df, time_col=time_col)

    create_calendar_exog = utils.create_exog_calendar(df)
    concat_all_exog = utils.concat_and_create_exog_fourier_for_weekend(create_fourier, create_calendar_exog)
    train, test, exog_train, exog_test  = utils.train_test_split_with_exog(df, concat_all_exog, split=train_size)
    print('Train, test, train_exog, test_exog: ', len(train), len(test), len(exog_train), len(exog_test))
    ex_tr_s, ex_test_s = utils.exog_scaler(exog_train, exog_test)

    #–ü–û–î–ë–ò–†–ê–ï–ú –ü–ê–†–ê–ú–ï–¢–†–´ SARIMAX –° –ü–û–ú–û–©–¨–Æ AUTOARIMA

    return




















if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)